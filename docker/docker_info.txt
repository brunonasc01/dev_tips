- instalar docker
1. sincroniza apt-get 
sudo apt-get update

2. remove instalacoes antigas
sudo apt-get remove docker docker-engine docker.io

3. instalar
sudo apt install docker.io

- corrigir erro "Got permission denied while trying to connect to the Docker daemon socket"
execute sudo chmod 666 /var/run/docker.sock
- definitivo
sudo setfacl --modify user:<username or id>:rw /var/run/docker.sock

- baixar uma imagem
docker pull <nome> (latest) ou docker pull <nome>:<versao> (versao especifica)

- registrar uma imagem no Docker Registry
docker push <nome>

- verificar as imagens instaladas
docker images

- acessar o shell do container 
docker exec -it <container-id> sh

- conferir status do servico
service docker status

- reiniciar o servico
service docker restart

- Docker image e como uma classe e Docker container Ã© como um objeto

- rodar uma imagem no modo interativo
docker run -i -t <imagem> <terminal>

- Sair do mod interativo
Ctrl+P Ctrl+Q

- Listar os containers em execucao
docker ps (-a mostra os parados)

- Entrar no container (interativo)
docker attach <nome ou id do container>

- Parar um container
docker stop <id>

- Iniciar um container
docker start <id>

- Reiniciar um container
docker restart <id>

- Pausar um container
docker pause/unpause <id>

- Remover um container (liberar memoria)
docker rm <id>

- Remover uma imagem
docker rmi <nome> (-f para remover imagens relacionadas)

- Remover containers parados (stopped)
docker container prune

- Criar uma nova imagem a partir do container
docker commit <id-do-container> <nome-nova-imagem>

- Renomear uma imagem
docker tag <id> <novo-nome>

- Rodar um container no modo daemon
docker run -d <imagem>

- Ver os logs de um container 
docker logs <id>

- Adicionar o docker ao root (remove a necessidade do sudo)
sudo groupadd docker
sudo usermod -aG docker $USER

- Criar uma imagem a partir do Dockerfile
docker build -t <nome-da-imagem>(opcional) <path-do-dockerfile> (ou -f <nome-docker-file .) -P (para ativar o binding quando definido EXPOSE no Dockerfile

- Comandos dockerfile
FROM <image> define a imagem base
MAINTAINER <author detail> detalhes do autor da imagem
COPY <src> <dst> copia um ou mais arquivos do source para o destino (dentro da imagem)
ADD <src> <dst> semelhante a copy, mas aceita aquivos tar no src
ENV <key> <value> define uma variavel de ambiente
ARG <arg> <value> define argumentos que serao aplicados no build da imagem
USER <id ou name> define o nome do usuario da imagem
WORKDIR <path> define o diretorio base
VOLUME <mountpoint> cria um diretorio na imagem
EXPOSE <port>/<proto> <port...> expoe portas da imagem para acesso externo
LABEL <key>=<value> adiciona valores ao metadata da imagem
RUN <comando> executa um comando qualquer no shell
CMD <comando> semelhante ao RUN, mas e executado na inicializacao da imagem
ENTRYPOINT <comando> executa um comando tambem
HEALTHCHECK <opt> CMD <comando> opt define o intervalo da verificacao do status do container e comand e o comando a ser executado

- Conferir o historico (layers) de uma imagem
docker history <id/name>

- Fazer login no dockerHub
docker login

- Fazer push de um container no docker_hub
docker push <nome da imagem>

- Criar um repositorio (Registry) local
sudo docker run -d -p 5000:5000 --restart=always --name registry registry:2

 - Consultar o status do registry (health check)
curl -i http://localhost:5000/v2/

- Ver o conteudo do registry
curl -i http://localhost:5000/v2/_catalog

- Colocar uma imagems no registry
docker tag <image-name> localhost:5000/<image-name>
docker push localhost:5000/<image-name>

- Lista as networks definidas no docker
docker network ls

- Verifica a configuracao de um network
docker network inspect <network>

- Definir qual network o container ira utilizar
parametro --net=(bridge[padrao]|host|none)

- Descobrir o ip de um container
docker inspect --format='{{.NetworkSettings.IPAddress}}' <hash-do-container>

- Expor uma porta do container
docker run -d -p <porta-exposta>:<porta-do-container> <imagem>
docker run -d -p <ip-determinado>:<porta-exposta>:<porta-do-container> <imagem>

- Verifica qual o port binding do container
docker port <id-container> 80

- Expor uma mesma porta em diferentes containers
docker run -d -p <porta-do-container> <imagem> (quantas vezes precisar)
docker run -d -p <porta-exposta>::<porta-do-container> <imagem> (com porta exposta arbitraria)


